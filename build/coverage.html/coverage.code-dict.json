{"/home/travis/build/npmtest/node-npmtest-node-pushnotifications/test.js":"/* istanbul instrument in package npmtest_node_pushnotifications */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-pushnotifications/lib.npmtest_node_pushnotifications.js":"/* istanbul instrument in package npmtest_node_pushnotifications */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_pushnotifications = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_pushnotifications = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-pushnotifications/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-pushnotifications && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_pushnotifications */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_pushnotifications\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_pushnotifications.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_pushnotifications.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_pushnotifications.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_pushnotifications.__dirname + '/lib.npmtest_node_pushnotifications.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-pushnotifications/node_modules/node-pushnotifications/index.js":"module.exports = require('./lib/push-notifications');\n","/home/travis/build/npmtest/node-npmtest-node-pushnotifications/node_modules/node-pushnotifications/lib/push-notifications.js":"'use strict';\n\nvar _sendGCM = require('./sendGCM');\n\nvar _sendGCM2 = _interopRequireDefault(_sendGCM);\n\nvar _sendAPN = require('./sendAPN');\n\nvar _sendAPN2 = _interopRequireDefault(_sendAPN);\n\nvar _sendADM = require('./sendADM');\n\nvar _sendADM2 = _interopRequireDefault(_sendADM);\n\nvar _sendWNS = require('./sendWNS');\n\nvar _sendWNS2 = _interopRequireDefault(_sendWNS);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar defaultSettings = {\n    gcm: {\n        id: null },\n    apn: { // See options at https://github.com/node-apn/node-apn/blob/master/doc/provider.markdown\n        token: null,\n        // {\n        //     key: '',\n        //     keyId: '',\n        //     teamId: '',\n        // },\n        cert: 'cert.pem',\n        key: 'key.pem',\n        ca: null,\n        pfx: null,\n        passphrase: null,\n        production: process.env.NODE_ENV === 'production',\n        voip: false,\n        address: null,\n        port: 443,\n        rejectUnauthorized: true,\n        connectionRetryLimit: 10,\n\n        cacheLength: 1000,\n        connectionTimeout: 3600000,\n        autoAdjustCache: true,\n        maxConnections: 1,\n        minConnections: 1,\n        connectTimeout: 10000,\n        buffersNotifications: true,\n        fastMode: false,\n        disableNagle: false,\n        disableEPIPEFix: false\n    },\n    adm: {\n        client_id: null, // PUT YOUR ADM CLIENT ID,\n        client_secret: null },\n    wns: {\n        client_id: null, // PUT YOUR WNS CLIENT ID,\n        client_secret: null, // PUT YOUR WNS CLIENT SECRET,\n        accessToken: null,\n        headers: null,\n        notificationMethod: 'sendTileSquareBlock'\n    },\n    mpns: {\n        options: {}\n    }\n};\n\nfunction PN(options) {\n    this.settings = Object.assign({}, defaultSettings, options || {});\n}\n\nPN.prototype.setOptions = function setOptions(opts) {\n    this.settings = Object.assign({}, this.settings, opts);\n};\n\nPN.prototype.sendWith = function sendWith(method, regIds, data, cb) {\n    return method(regIds, data, this.settings).then(function (results) {\n        (cb || function (noop) {\n            return noop;\n        })(null, results);\n        return results;\n    }).catch(function (error) {\n        (cb || function (noop) {\n            return noop;\n        })(error);\n        return Promise.reject(error);\n    });\n};\n\nPN.prototype.send = function send(_regIds, data, callback) {\n    var promises = [];\n    var regIdsGCM = [];\n    var regIdsAPN = [];\n    var regIdsWNS = [];\n    var regIdsADM = [];\n    var regIdsUnk = [];\n    var regIds = Array.isArray(_regIds || []) ? _regIds || [] : [_regIds];\n\n    // Classify each pushId for corresponding device\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = regIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var regId = _step.value;\n\n            if (regId.substring(0, 4) === 'http') {\n                regIdsWNS.push(regId);\n            } else if (/(amzn|adm)/i.test(regId)) {\n                regIdsADM.push(regId);\n            } else if (regId.length > 64) {\n                regIdsGCM.push(regId);\n            } else if (regId.length === 64) {\n                regIdsAPN.push(regId);\n            } else {\n                regIdsUnk.push(regId);\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    try {\n        // Android GCM\n        if (regIdsGCM.length > 0) {\n            promises.push(this.sendWith(_sendGCM2.default, regIdsGCM, data));\n        }\n\n        // iOS APN\n        if (regIdsAPN.length > 0) {\n            promises.push(this.sendWith(_sendAPN2.default, regIdsAPN, data));\n        }\n\n        // Microsoft WNS\n        if (regIdsWNS.length > 0) {\n            promises.push(this.sendWith(_sendWNS2.default, regIdsWNS, data));\n        }\n\n        // Amazon ADM\n        if (regIdsADM.length > 0) {\n            promises.push(this.sendWith(_sendADM2.default, regIdsADM, data));\n        }\n    } catch (err) {\n        promises.push(Promise.reject(err));\n    }\n\n    // Unknown\n    if (regIdsUnk.length > 0) {\n        (function () {\n            var results = {\n                method: 'unknown',\n                success: 0,\n                failure: regIdsUnk.length,\n                message: []\n            };\n            regIdsUnk.forEach(function (regId) {\n                results.message.push({\n                    regId: regId,\n                    error: new Error('Unknown registration id')\n                });\n            });\n            promises.push(Promise.resolve(results));\n        })();\n    }\n\n    // No regIds detected\n    if (promises.length === 0) {\n        promises.push(Promise.resolve({\n            method: 'none',\n            success: 0,\n            failure: 0,\n            message: []\n        }));\n    }\n\n    return Promise.all(promises).then(function (results) {\n        var cb = callback || function (noop) {\n            return noop;\n        };\n        cb(null, results);\n        return results;\n    }).catch(function (err) {\n        var cb = callback || function (noop) {\n            return noop;\n        };\n        cb(err);\n        return Promise.reject(err);\n    });\n};\n\nmodule.exports = PN;","/home/travis/build/npmtest/node-npmtest-node-pushnotifications/node_modules/node-pushnotifications/lib/sendGCM.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar gcm = require('node-gcm');\n\nvar method = 'gcm';\n\nvar sendChunk = function sendChunk(GCMSender, registrationTokens, message, retries) {\n    return new Promise(function (resolve) {\n        GCMSender.send(message, { registrationTokens: registrationTokens }, retries, function (err, response) {\n            // Response: see https://developers.google.com/cloud-messaging/http-server-ref#table5\n            if (err) {\n                resolve({\n                    method: method,\n                    success: 0,\n                    failure: registrationTokens.length,\n                    message: registrationTokens.map(function (value) {\n                        return {\n                            regId: value,\n                            error: err\n                        };\n                    })\n                });\n            } else if (response && response.results !== undefined) {\n                (function () {\n                    var regIndex = 0;\n                    resolve({\n                        method: method,\n                        multicastId: response.multicast_id,\n                        success: response.success,\n                        failure: response.failure,\n                        message: response.results.map(function (value) {\n                            var regToken = registrationTokens[regIndex];\n                            regIndex += 1;\n                            return {\n                                messageId: value.message_id,\n                                regId: value.registration_id || regToken,\n                                error: value.error ? new Error(value.error) : null\n                            };\n                        })\n                    });\n                })();\n            } else {\n                resolve({\n                    method: method,\n                    multicastId: response.multicast_id,\n                    success: response.success,\n                    failure: response.failure,\n                    message: registrationTokens.map(function (value) {\n                        return {\n                            regId: value,\n                            error: new Error('unknown')\n                        };\n                    })\n                });\n            }\n        });\n    });\n};\n\nmodule.exports = function (regIds, data, settings) {\n    var opts = Object.assign({}, settings.gcm);\n    var id = opts.id;\n    delete opts.id;\n    var GCMSender = new gcm.Sender(id, opts);\n    var promises = [];\n    var notification = {\n        title: data.title, // Android, iOS (Watch)\n        body: data.body, // Android, iOS\n        icon: data.icon, // Android\n        sound: data.sound, // Android, iOS\n        badge: data.badge, // iOS\n        tag: data.tag, // Android\n        color: data.color, // Android\n        click_action: data.clickAction || data.category, // Android, iOS\n        body_loc_key: data.locKey, // Android, iOS\n        body_loc_args: data.locArgs, // Android, iOS\n        title_loc_key: data.titleLocKey, // Android, iOS\n        title_loc_args: data.titleLocArgs };\n\n    var custom = void 0;\n    if (typeof data.custom === 'string') {\n        custom = {\n            message: data.custom\n        };\n    } else if (_typeof(data.custom) === 'object') {\n        custom = Object.assign({}, data.custom);\n    } else {\n        custom = {\n            data: data.custom\n        };\n    }\n\n    custom.title = custom.title || data.title || '';\n    custom.message = custom.message || data.body || '';\n    custom.sound = custom.sound || data.sound || undefined;\n    custom.icon = custom.icon || data.icon || undefined;\n    custom.msgcnt = custom.msgcnt || data.badge || undefined;\n    if (opts.phonegap === true && data.contentAvailable) {\n        custom['content-available'] = 1;\n    }\n\n    var message = new gcm.Message({ // See https://developers.google.com/cloud-messaging/http-server-ref#table5\n        collapseKey: data.collapseKey,\n        priority: data.priority === 'normal' ? data.priority : 'high',\n        contentAvailable: data.contentAvailable || false,\n        delayWhileIdle: data.delayWhileIdle || false,\n        timeToLive: data.expiry - Math.floor(Date.now() / 1000) || data.timeToLive || 28 * 86400,\n        restrictedPackageName: data.restrictedPackageName,\n        dryRun: data.dryRun || false,\n        data: opts.phonegap === true ? Object.assign(custom, notification) : custom, // See https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/PAYLOAD.md#android-behaviour\n        notification: opts.phonegap === true ? undefined : notification\n    });\n    var chunk = 0;\n\n    // Split in 1.000 chunks, see https://developers.google.com/cloud-messaging/http-server-ref#table1\n    do {\n        var tokens = regIds.slice(chunk * 1000, (chunk + 1) * 1000);\n        promises.push(sendChunk(GCMSender, tokens, message, data.retries || 0));\n        chunk += 1;\n    } while (1000 * chunk < regIds.length);\n\n    return Promise.all(promises).then(function (results) {\n        var resumed = {\n            method: method,\n            multicastId: [],\n            success: 0,\n            failure: 0,\n            message: []\n        };\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = results[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var result = _step.value;\n\n                if (result.multicastId) {\n                    resumed.multicastId.push(result.multicastId);\n                }\n                resumed.success += result.success;\n                resumed.failure += result.failure;\n                resumed.message = [].concat(_toConsumableArray(resumed.message), _toConsumableArray(result.message));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return resumed;\n    });\n};","/home/travis/build/npmtest/node-npmtest-node-pushnotifications/node_modules/node-pushnotifications/lib/sendAPN.js":"'use strict';\n\nvar apn = require('apn');\n\nvar method = 'apn';\n\nmodule.exports = function (regIds, data, settings) {\n    var message = new apn.Notification({\n        retryLimit: data.retries || -1,\n        expiry: data.expiry || (data.timeToLive || 28 * 86400) + Math.floor(Date.now() / 1000),\n        priority: data.priority === 'normal' ? 5 : 10,\n        encoding: data.encoding,\n        payload: data.custom || {},\n        badge: data.badge,\n        sound: data.sound || 'ping.aiff',\n        alert: data.alert || {\n            title: data.title,\n            body: data.body,\n            'title-loc-key': data.titleLocKey,\n            'title-loc-args': data.titleLocArgs,\n            'loc-key': data.locKey,\n            'loc-args': data.bodyLocArgs,\n            'launch-image': data.launchImage,\n            action: data.action\n        },\n        topic: data.topic,\n        category: data.category || data.clickAction,\n        contentAvailable: data.contentAvailable,\n        mdm: data.mdm,\n        urlArgs: data.urlArgs,\n        truncateAtWordEnd: data.truncateAtWordEnd,\n        collapseId: data.collapseKey,\n        mutableContent: data.mutableContent || 0\n    });\n    var connection = new apn.Provider(settings.apn);\n\n    return connection.send(message, regIds).then(function (response) {\n        var resumed = {\n            method: method,\n            success: 0,\n            failure: 0,\n            message: []\n        };\n        (response.sent || []).forEach(function (token) {\n            resumed.success += 1;\n            resumed.message.push({\n                regId: token,\n                error: null\n            });\n        });\n        (response.failed || []).forEach(function (failure) {\n            resumed.failure += 1;\n            if (failure.error) {\n                // A transport-level error occurred (e.g. network problem)\n                resumed.message.push({\n                    regId: failure.device,\n                    error: failure.error\n                });\n            } else {\n                // `failure.status` is the HTTP status code\n                // `failure.response` is the JSON payload\n                resumed.message.push({\n                    regId: failure.device,\n                    error: new Error(failure.response.reason || failure.response)\n                });\n            }\n        });\n        return resumed;\n    });\n};","/home/travis/build/npmtest/node-npmtest-node-pushnotifications/node_modules/node-pushnotifications/lib/sendADM.js":"'use strict';\n\nvar adm = require('node-adm');\n\nvar method = 'adm';\n\nmodule.exports = function (regIds, _data, settings) {\n    var resumed = {\n        method: method,\n        success: 0,\n        failure: 0,\n        message: []\n    };\n    var promises = [];\n    var admSender = new adm.Sender(settings.adm);\n    var data = Object.assign({}, _data);\n    var consolidationKey = data.consolidationKey;\n    var expiry = data.expiry;\n    var timeToLive = data.timeToLive;\n\n    delete data.consolidationKey;\n    delete data.expiry;\n    delete data.timeToLive;\n\n    var message = {\n        expiresAfter: expiry - Math.floor(Date.now() / 1000) || timeToLive || 28 * 86400,\n        consolidationKey: consolidationKey,\n        data: data\n    };\n\n    regIds.forEach(function (regId) {\n        admSender.send(message, regId, function (err, response) {\n            resumed.success += err || response.error ? 0 : 1;\n            resumed.failure += err || response.error ? 1 : 0;\n            resumed.message.push({\n                regId: regId,\n                error: err || (response.error ? new Error(response.error) : null)\n            });\n            promises.push(Promise.resolve());\n        });\n    });\n\n    return Promise.all(promises).then(function () {\n        return resumed;\n    });\n};","/home/travis/build/npmtest/node-npmtest-node-pushnotifications/node_modules/node-pushnotifications/lib/sendWNS.js":"'use strict';\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar wns = require('wns');\n\nvar method = 'wns';\nvar resumed = void 0;\n\nfunction processResponse(err, response, regId) {\n    resumed.success += err || response.innerError ? 0 : 1;\n    resumed.failure += err || response.innerError ? 1 : 0;\n    resumed.message.push({\n        regId: regId,\n        error: err || (response.innerError ? new Error(response.innerError) : null)\n    });\n}\n\nmodule.exports = function (_regIds, _data, settings) {\n    // sendNotifications and sendPromises are inside exports as in this way,\n    // successive calls to this module doesn't override previous ones\n    var sendPromises = void 0;\n\n    function sendNotifications(regIds, notificationMethod, data, opts, onFinish) {\n        var regId = regIds.shift();\n        if (regId) {\n            try {\n                wns[notificationMethod](regId, data, opts, function (err, response) {\n                    sendPromises.push(Promise.resolve());\n                    processResponse(err, response, regId);\n                    sendNotifications(regIds, notificationMethod, data, Object.assign({}, opts, {\n                        accessToken: response.newAccessToken\n                    }), onFinish);\n                });\n            } catch (err) {\n                sendPromises.push(Promise.reject(err));\n                sendNotifications(regIds, notificationMethod, data, opts, onFinish);\n            }\n        } else {\n            Promise.all(sendPromises).then(function () {\n                return onFinish();\n            }, onFinish);\n        }\n    }\n\n    var promises = [];\n    var notificationMethod = settings.wns.notificationMethod;\n    var opts = Object.assign({}, settings.wns);\n    var data = Object.assign({}, _data);\n\n    resumed = {\n        method: method,\n        success: 0,\n        failure: 0,\n        message: []\n    };\n    opts.headers = data.headers || opts.headers;\n    opts.launch = data.launch || opts.launch;\n    opts.duration = data.duration || opts.duration;\n\n    delete opts.notificationMethod;\n    delete data.headers;\n    delete data.launch;\n    delete data.duration;\n\n    if (opts.accessToken) {\n        (function () {\n            sendPromises = [];\n            var regIds = [].concat(_toConsumableArray(_regIds));\n            promises.push(new Promise(function (resolve, reject) {\n                return sendNotifications(regIds, notificationMethod, data, opts, function (err) {\n                    return err ? reject(err) : resolve();\n                });\n            }));\n        })();\n    } else {\n        _regIds.forEach(function (regId) {\n            return promises.push(new Promise(function (resolve) {\n                return wns[notificationMethod](regId, data, opts, function (err, response) {\n                    processResponse(err, response, regId);\n                    resolve();\n                });\n            }));\n        });\n    }\n\n    return Promise.all(promises).then(function () {\n        return resumed;\n    });\n};"}